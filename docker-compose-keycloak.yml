#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

version: '2.1'

services:

  #infinispan:
    #image: infinispan/server:14.0.4.Final
  #  image: infinispan/server:14.0.4.Final
  #  container_name: infinispan
  #  ports:
  #    - "11222:11222"
  #  command: "-c infinispan-demo.xml"
  #  volumes:
  ##    - ./infinispan/infinispan.xml:/opt/infinispan/server/conf/infinispan-demo.xml:z
   # healthcheck:
   #   test: [ "CMD", "curl", "-f", "http://localhost:11222/rest/v2/cache-managers/default/health/status" ]
   #   interval: 1s
   #   timeout: 1s
   #   retries: 50

  zookeeper:
    container_name: zookeeper
    image: strimzi/kafka:0.20.1-kafka-2.6.0
    command: [
        "sh", "-c",
        "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: "/tmp/logs"

  kafka:
    image: strimzi/kafka:0.20.1-kafka-2.6.0
    container_name: kafka
    command: [
        "sh", "-c",
        "bin/kafka-server-start.sh config/server.properties --override inter.broker.listener.name=$${KAFKA_INTER_BROKER_LISTENER_NAME} --override listener.security.protocol.map=$${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP} --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      LOG_DIR: "/tmp/logs"
  kafka-ui-demo:
    container_name: kafka-ui-demo
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8085:8080
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_METRICS_PORT: 11001
      KAFKA_CLUSTERS_0_METRICS_TYPE: PROMETHEUS
  #prometheus:
  #  image: prom/prometheus:v2.8.0
  ##  container_name: prometheus
  #  volumes:
  #    - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:z
  #  command:
  #    - '--config.file=/etc/prometheus/prometheus.yml'
  #  ports:
  #    - 9090:9090

  #grafana:
  #  image: grafana/grafana:6.6.1
  #  container_name: grafana
  #  depends_on:
  #    - prometheus
  ##  ports:
  #   - 3000:3000
  #  volumes:
  #    - ./grafana/provisioning/:/etc/grafana/provisioning/:z
  #  environment:
  #    - PROMETHEUS_URL=http://prometheus:9090

  keycloak:
    container_name: keycloak
    #image: quay.io/keycloak/keycloak:legacy
    #image: quay.io/keycloak/keycloak:21.0.2-0
    #image: quay.io/keycloak/keycloak:25.0.1
    image: quay.io/keycloak/keycloak:25.0.2
    command: ["start-dev"]
    ports:
      - "8480:8080"
      - "8080:8080"
    volumes:
      - ./keycloak/kogito-realm.json:/tmp/kogito-realm.json
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/auth/realms/kogito" ]
      interval: 1s
      timeout: 1s
      retries: 50
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      DB_PORT: 5432
      DB_SCHEMA: public
      KC_DB_USERNAME: aowf
      KC_DB_PASSWORD: P@ssword@wf
      KC_DB_URL: jdbc:postgresql://postgres-db-ao:5432/keycloak
      KEYCLOAK_IMPORT: /tmp/kogito-realm.json
      KC_HOSTNAME: http://localhost:8480
      PROXY_ADDRESS_FORWARDING: true,
      KEYCLOAK_HOSTNAME: localhost
  postgres-db-ao:
    image: quay.io/debezium/example-postgres:latest
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: aowf
      POSTGRES_PASSWORD: P@ssword@wf
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U aowf -d P@ssword@wf'"]
      interval: 10s
      timeout: 3s
      retries: 3
    #volumes:
       # copy the sql script to create schema
      #- ./ddl/create_database.sql:/docker-entrypoint-initdb.d/create_database.sql
  data-index:
    container_name: data-index
    image: quay.io/kiegroup/kogito-data-index-postgresql:9.99.1.CR1
    #image: quay.io/kiegroup/kogito-data-index-infinispan:${KOGITO_VERSION}
    ports:
      - "8180:8080"
    depends_on:
      kafka:
        condition: service_started
      #infinispan:
      #  condition: service_healthy
    volumes:
      - ./target/protobuf:/home/kogito/data/protobufs/
    environment:
      
      QUARKUS_DATASOURCE_DB-KIND: postgres
      QUARKUS_DATASOURCE_USERNAME: aowf
      QUARKUS_DATASOURCE_PASSWORD: P@ssword@wf
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres-db-ao:5432/aowf
      QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION: update
      #QUARKUS_INFINISPAN_CLIENT_HOSTS: infinispan:11222
      #QUARKUS_INFINISPAN_CLIENT_USE_AUTH: "false"
      QUARKUS_HTTP_CORS_ORIGINS: "/.*/"
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KOGITO_DATA_INDEX_PROPS: -Dkogito.protobuf.folder=/home/kogito/data/protobufs/
     #QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION: create
      QUARKUS_TRANSACTION_MANAGER_DEFAULT_TRANSACTION_TIMEOUT: "600"
      MP_MESSAGING_INCOMING_KOGITO_CONNECTOR: smallrye-kafka
      MP_MESSAGING_INCOMING_KOGITO_VALUE_DESERIALIZER: org.apache.kafka.common.serialization.StringDeserializer
   
  management-console:
    container_name: management-console
    image: local/console-management
    build: ./console-mgmt
    ports:
      - 8280:8080
    depends_on:
      data-index:
        condition: service_started
      keycloak:
        condition: service_healthy
    volumes:
      - ./svg/:/home/kogito/data/svg/

    environment:
      KOGITO_DATAINDEX_HTTP_URL: http://data-index:8180
      KOGITO_DATAINDEX_WS_URL: ws://localhost:8180
      SCRIPT_DEBUG: "true"
      KOGITO_QUARKUS_HTTP_CORS_ORIGINS: "/.*/"
      JAVA_OPTS: -Dquarkus.log.console.level=DEBUG -Dquarkus.oidc.enabled=true -Dquarkus.oidc.tenant-enabled=true -Dquarkus.oidc.auth-server-url=http://keycloak:8080/realms/kogito -Dquarkus.oidc.client-id=kogito-console-quarkus -Dquarkus.oidc.credentials.secret=9m45By2RMd6UP05rEKXc06Pm14o4Vta8 -Dquarkus.oidc.application-type=web-app -Dquarkus.oidc.logout.path=/logout -Dquarkus.oidc.logout.post-logout-path=/ -Dquarkus.http.auth.permission.authenticated.paths=/* -Dquarkus.http.auth.permission.authenticated.policy=authenticated
  task-console:
    container_name: task-console
    image: quay.io/kiegroup/kogito-task-console:latest
    ports:
      - 8380:8080
    depends_on:
      data-index:
        condition: service_started
      keycloak:
        condition: service_healthy
    environment:
      KOGITO_DATAINDEX_HTTP_URL: http://kubernetes.docker.internal:8180/graphql
      #KOGITO_TASK_CONSOLE_PROPS: -Dkogito.consoles.keycloak.config.url=http://localhost:8480 -Dkogito.consoles.keycloak.config.health-check-url=http://localhost:8480/auth/realms/kogito/.well-known/openid-configuration
      KOGITO_TASK_CONSOLE_PROPS: -Dkogito.consoles.keycloak.config.url=http://localhost:8480 -Dkogito.consoles.keycloak.config.health-check-url=http://localhost:8480/realms/kogito/.well-known/openid-configuration
      QUARKUS_HTTP_CORS_ORIGINS: "/.*/"